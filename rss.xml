<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Me, Myself &amp; Dev</title>
        <link>https://jinnyjinnyjinjin.github.io/</link>
        <description></description>
        <generator>Hugo 0.78.0 https://gohugo.io/</generator>
        
            <language>en</language>
        
        
            <managingEditor>kkam2ya@gmail.com (jinnyjinnyjinjin)</managingEditor>
        
        
            <webMaster>kkam2ya@gmail.com (jinnyjinnyjinjin)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
        
        <lastBuildDate>Sun, 13 Dec 2020 17:09:04 &#43;0900</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://jinnyjinnyjinjin.github.io/rss.xml" />
        
        
            <item>
                <title>IDE 에서는 왜 Lombok 플러그인을 설치해야 할까?</title>
                <link>https://jinnyjinnyjinjin.github.io/posts/2020/12/02-why-ide-needs-to-intall-lombok-plugin/</link>
                <guid isPermaLink="true">https://jinnyjinnyjinjin.github.io/posts/2020/12/02-why-ide-needs-to-intall-lombok-plugin/</guid>
                <pubDate>Thu, 03 Dec 2020 18:47:18 &#43;0900</pubDate>
                
                
                
                    <description>&lt;p&gt;&lt;code&gt;lombok&lt;/code&gt; 은 개발을 참 편리하게 해 주는 라이브러리 중 하나다.&lt;br&gt;
어제 intelliJ 의 새로운 버전이 릴리즈돼서 바로 업데이트를 했다. (난 업데이트를 해야 직성이 풀린다..)
그랬더니 lombok 플러그인이 아직 업데이트되지 않아서인지 lombok을 적용한 코드가 에러를 마구마구 뱉어냈다.
이 때, 궁금해졌다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;왜 lombok은 dependency 를 추가하고도 IntelliJ 에서 플러그인을 설치 해 줘야 할까?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;lombok-플러그인-설치-필요성&#34;&gt;Lombok 플러그인 설치 필요성&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Lombok uses annotation processing through APT, so, when the compiler calls it, the library generates new source files based on annotations in the originals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;lombok은 어노테이션 프로세싱을 사용하는데, 컴파일러가 호출하면 lombok 라이브러리는 오리지널 어노테이션 기반의 새로운 소스 파일을 생성한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As Lombok generates code only during compilation, the IDE highlights errors in raw source code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;lombok 은 컴파일 중 코드만 생성하므로, IDE 는 소스 코드를 에러로 나타낸다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a dedicated plugin which makes IntelliJ aware of the source code to be generated. After installing it, the errors go away and regular features like Find Usages, Navigate To start working.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IntelliJ(또는 이클립스 등등)이 생성 될 소스 코드를 인식하도록하는 전용 플러그인이 있다. 이 플러그인을 설치하고나면, 에러는 사라지고 IntelliJ 의 고정 기능인 &lt;code&gt;Fine Usages&lt;/code&gt;, &lt;code&gt;Navigate To&lt;/code&gt; 와 같은 기능들을 사용할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;결국 IDE 가 소스 코드를 파악하고 IDE에서 제공하는 기능을 사용할 수 있도록 하기위한 것으로 확인된다.
lombok 의 동작 과정을 좀 더 깊이있게 살펴봐야 겠다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;출처: &lt;a href=&#34;https://www.baeldung.com/lombok-ide&#34;&gt;https://www.baeldung.com/lombok-ide&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/lombok/">Lombok</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>[Network] https 동작 과정</title>
                <link>https://jinnyjinnyjinjin.github.io/posts/2020/12/02-how-to-work-https/</link>
                <guid isPermaLink="true">https://jinnyjinnyjinjin.github.io/posts/2020/12/02-how-to-work-https/</guid>
                <pubDate>Thu, 03 Dec 2020 18:35:29 &#43;0900</pubDate>
                
                
                
                    <description>&lt;h2 id=&#34;http-란&#34;&gt;Http 란?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Hyper Text Transfer Protocol&lt;/code&gt; 의 약자로 인터넷 통신 규약 입니다.
접속하고자 하는 주소 앞에 &lt;code&gt;http&lt;/code&gt; 를 붙여 줌으로써, &lt;code&gt;나는 지금 http 형식으로 요청 하는거야~&lt;/code&gt; 라는 클라이언트의 요청에 서버는 &lt;code&gt;아~ 이 요청은 http 형식이구나~&lt;/code&gt; 라고 파악하고 &lt;code&gt;http&lt;/code&gt; 형식으로 해석하여 클라이언트가 요청한 정보를 전달합니다.&lt;/p&gt;
&lt;h2 id=&#34;https-란&#34;&gt;Https 란?&lt;/h2&gt;
&lt;p&gt;기존의 &lt;code&gt;http&lt;/code&gt; 에 보안이라는 뜻의 &lt;code&gt;Secure&lt;/code&gt;의 &lt;code&gt;s&lt;/code&gt;를 붙여 보안 기능을 제공합니다.&lt;/p&gt;
&lt;h2 id=&#34;https-필요성&#34;&gt;Https 필요성&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;내가 사이트에 보내는 정보들을 제 3자가 보지 못하게 합니다.&lt;/li&gt;
&lt;li&gt;접속한 사이트가 믿을 만한 곳인지를 알려줍니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;https-동작-과정&#34;&gt;Https 동작 과정&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jinnyjinnyjinjin.github.io/posts/2020/12/02-how-to-work-https/#1.-sand-shake&#34;&gt;1. Hand shake&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://jinnyjinnyjinjin.github.io/posts/2020/12/02-how-to-work-https/#2.-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EA%B2%80%EC%A6%9D&#34;&gt;2. 인증서 검증&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://jinnyjinnyjinjin.github.io/posts/2020/12/02-how-to-work-https/#3.-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%95%94%ED%98%B8/%EB%B3%B5%ED%98%B8%ED%99%94&#34;&gt;3. 데이터 암호/복호화&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-hand-shake&#34;&gt;1. Hand shake&lt;/h3&gt;
&lt;p&gt;우리가 브라우저 주소 입력창에 &lt;code&gt;http://&lt;/code&gt; 주소를 입력하면 입력한 당사자(클라이언트)와 접속하려는 해당 주소의 서버는 서로의 신뢰 관계를 형성하기 위해 핸드 쉐이크 과정을 수행 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;클라이언트가 랜덤 데이터를 생성하고 서버에 전달 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/12/hand_shaking_1.png&#34; alt=&#34;hand_shaking_1&#34; /&gt;&lt;br&gt;
&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;클라이언트의 랜덤 데이터를 받은 서버는 서버의 랜덤 데이터를 생성하고 생성된 데이터와 인증서를 클라이언트에 전달 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/12/hand_shaking_2.png&#34; alt=&#34;hand_shaking_2&#34; /&gt;&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;여기까지가 클라이언트와 서버의 &lt;code&gt;Hand shake&lt;/code&gt; 과정입니다.&lt;/p&gt;
&lt;h3 id=&#34;2-인증서-검증&#34;&gt;2. 인증서 검증&lt;/h3&gt;
&lt;p&gt;서버로 부터 받은 인증서를 발급 할 수 있는 기관을 &lt;code&gt;CA(Certificate Authority)&lt;/code&gt; 라고 합니다. 이러한 &lt;code&gt;CA&lt;/code&gt; 는 여러 곳이 존재 하는데 공식적으로 인정 받은 곳만 유효한 인증서를 발급할 수 있는 권한을 가지고 있습니다.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/12/CAs.png&#34; alt=&#34;cas&#34; title=&#34;CA 기관&#34; width=&#34;40%&#34;/&gt;&lt;br&gt;
    &lt;figurecaption&gt;CA 기관 [출처: Wikipedia]&lt;/figurecaption&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;서버로부터 전달 받은 인증서는 CA 의 개인키로 암호화되어 있습니다. 브라우저에 내장된 CA 공개키를 가지고 인증서를 복호화하여 검증합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/12/cert_verification.png&#34; alt=&#34;cert_verification&#34; /&gt;
    &lt;figurecaption&gt;인증서 검증&lt;/figurecaption&gt;
&lt;/p&gt;
&lt;p&gt;만약 CA 리스트에 해당하는 인증서가 아니라면 주소창에 &lt;code&gt;Not secure&lt;/code&gt; 라는 경고가 뜨게 됩니다.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/12/http_warning.png&#34; alt=&#34;http_warning&#34; width=&#34;40%&#34;/&gt;
&lt;/p&gt;
&lt;h3 id=&#34;3-데이터-암호복호화&#34;&gt;3. 데이터 암호/복호화&lt;/h3&gt;
&lt;p&gt;핸드 쉐이크와 인증서의 검증 과정을 거치고 서로의 신뢰를 확인한 클라이언트와 서버가 데이터를 주고 받습니다. 이 때는 대칭키와 비대칭키를 활용하여 데이터를 암호/복호화 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;성공적으로 복호화된 인증서에는 서버의 공개키가 포함되어 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/12/server_pub_key.png&#34; alt=&#34;server_pub_key&#34; /&gt;
&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;클라이언트는 앞전에 생성하고 서버로부터 전달 받은 랜덤한 데이터를 가지고 임시 키를 생성 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/12/temp_key.png&#34; alt=&#34;temp_key&#34; /&gt;
&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;생성한 임시 키를 서버의 공개키로 암호화하여 서버에게 전달 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/12/send_temp_key.png&#34; alt=&#34;send_temp_key&#34; /&gt;
&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;서버가 암호화된 임시 키를 전달 받으면 자신이 가지고 있는 개인키로 복호화 하고 클라이언트와 서버 양측에서는 각각 일련의 과정을 거쳐 동일한 대칭키를 생성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/12/symmetric_key.png&#34; alt=&#34;symmetric_key&#34; /&gt;
&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;이렇게 생성된 대칭키는 오직 클라이언트와 서버만이 가지고 있습니다. 이 대칭키를 가지고 데이터를 암호화하여 전달하고, 받은 쪽에서 같은 대칭키로 복호화하여 외부로부터 안전하게 데이터를 주고 받을 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;출처: &lt;a href=&#34;https://www.youtube.com/watch?v=H6lpFRpyl14&#34;&gt;https://www.youtube.com/watch?v=H6lpFRpyl14&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/network/">Network</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>[Hackerrank] Mark and Toys</title>
                <link>https://jinnyjinnyjinjin.github.io/posts/2020/11/08-hacerrank-mark-and-toys/</link>
                <guid isPermaLink="true">https://jinnyjinnyjinjin.github.io/posts/2020/11/08-hacerrank-mark-and-toys/</guid>
                <pubDate>Sun, 08 Nov 2020 17:25:39 &#43;0900</pubDate>
                
                
                
                    <description>&lt;h3 id=&#34;문제&#34;&gt;문제&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;int&lt;/code&gt; 타입의 배열 &lt;code&gt;prices&lt;/code&gt; 에는 다양한 가격의 장난감들이 있는데 이 장난감들 중 마크가 가진 재산 내에서 살 수 있는 최대 갯수의 장난감을 구하는 문제이다.
input:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;7 50			      7: 장난감이 들어있는 배열의 길이, 50: 마크의 재산
1 12 5 111 200 1000 10        각 장난감의 가격
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4	마크가 가진 재산으로 살 수 있는 최대 장난감의 개수
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;결과&#34;&gt;결과&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;maximumToys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        	&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        	&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
       	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;풀이&#34;&gt;풀이&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;result&lt;/code&gt; 는 각 장난감 가격의 합을 담을 변수이고, &lt;code&gt;count&lt;/code&gt; 는 구입 가능한 장난감의 개수를 담는다.
우선 &lt;code&gt;prices&lt;/code&gt; 배열에서 최대한 작은 값의 장난감들을 구입해, 마크가 가진 재산에 맞춰야 하기 때문에 배열을 &lt;code&gt;sort&lt;/code&gt; 메소드로 정렬 해 주었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;그리고 &lt;code&gt;for each&lt;/code&gt; 문을 사용해 &lt;code&gt;prices&lt;/code&gt; 배열에 담긴 장남감의 가격을 하나씩 마크의 재산인 &lt;code&gt;k&lt;/code&gt; 와 비교하고 장난감의 가격이 &lt;code&gt;k&lt;/code&gt; 보다 작거나 같을 경우에는 &lt;code&gt;result&lt;/code&gt; 값에 장난감의 가격을 계속 더해 나간다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    	&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;계속해서 장난감의 가격을 더해 나가다가 &lt;code&gt;result&lt;/code&gt; 의 값이 &lt;code&gt;k&lt;/code&gt; 보다 크게 되면 더 이상 장난감을 구입할 수 없기 때문에 &lt;code&gt;break&lt;/code&gt; 를 걸어 반복문을 빠져 나간다.
그리고 이 조건문에서 &lt;code&gt;break&lt;/code&gt; 가 걸리지 않으면 &lt;code&gt;count++&lt;/code&gt; 로 살 수 있는 장난감의 개수를 추가한다. 반복문을 반복하다가 모든 작업이 끝나면 &lt;code&gt;count&lt;/code&gt; 를 반환한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        	&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
       	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;출처:
&lt;a href=&#34;https://www.hackerrank.com/challenges/mark-and-toys/problem?h_l=interview&amp;amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;amp;playlist_slugs%5B%5D=sorting&#34;&gt;Mark and Toys | HackerRank&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/algorithm/">Algorithm</category>
                                
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/hackerrank/">Hackerrank</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>[Anaconda] 터미널 시작 시 자동으로 활성화되는 virtualenv 비활성화</title>
                <link>https://jinnyjinnyjinjin.github.io/posts/2020/11/08-anaconda-deactivating/</link>
                <guid isPermaLink="true">https://jinnyjinnyjinjin.github.io/posts/2020/11/08-anaconda-deactivating/</guid>
                <pubDate>Sun, 08 Nov 2020 17:23:16 &#43;0900</pubDate>
                
                
                
                    <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;conda config --set auto_activate_base &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/anaconda/">Anaconda</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>[Docker] 자주 쓰이는 Docker 명령어</title>
                <link>https://jinnyjinnyjinjin.github.io/posts/2020/11/08-docker-frequent-command-usage/</link>
                <guid isPermaLink="true">https://jinnyjinnyjinjin.github.io/posts/2020/11/08-docker-frequent-command-usage/</guid>
                <pubDate>Sun, 08 Nov 2020 17:17:19 &#43;0900</pubDate>
                
                
                
                    <description>&lt;h2 id=&#34;container&#34;&gt;Container&lt;/h2&gt;
&lt;p&gt;실행 중인 컨테이너 확인&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;모든 컨테이너 확인&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker ps -a
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;실행중인 컨테이너 정지&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker stop &amp;lt;CONTAINER_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;정지시킨 컨테이너 삭제&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker rm &amp;lt;CONTAINER_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;컨테이너 강제 삭제&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker rm -f &amp;lt;CONTAINER_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;컨테이너 전체 삭제&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker rm &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker ps -a&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;image&#34;&gt;Image&lt;/h2&gt;
&lt;p&gt;이미지 확인&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;이미지 삭제&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker rmi &amp;lt;IMAGE_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;이미지 전체 삭제&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker rmi &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker images -a -q&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/docker/">Docker</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>[Algorithm] Repeated String</title>
                <link>https://jinnyjinnyjinjin.github.io/posts/2020/11/08-java-hackerrank-algorithm-1/</link>
                <guid isPermaLink="true">https://jinnyjinnyjinjin.github.io/posts/2020/11/08-java-hackerrank-algorithm-1/</guid>
                <pubDate>Sun, 08 Nov 2020 15:39:57 &#43;0900</pubDate>
                
                
                
                    <description>&lt;p&gt;문자열 &lt;code&gt;s&lt;/code&gt; 와 문자열을 반복적으로 채워넣을 인덱스 수 &lt;code&gt;n&lt;/code&gt; 이 주어졌을 때, 문자 &lt;code&gt;a&lt;/code&gt; 의 개수를 찾는 문제다.&lt;/p&gt;
&lt;p&gt;예를 들어, 문자열 &lt;code&gt;s = &amp;quot;abcac&amp;quot;&lt;/code&gt; 가 주어지고, 이 문자열을 반복할 개수  &lt;code&gt;n = 10&lt;/code&gt; 이 주어진다면, &lt;code&gt;n&lt;/code&gt; 만큼의 인덱스에 반복해서 문자를 채우면  &lt;code&gt;&amp;quot;abcacabcac&amp;quot;&lt;/code&gt; 가 된다. 여기서 문자 &lt;code&gt;a&lt;/code&gt; 의 개수는 &lt;strong&gt;4&lt;/strong&gt;개가 된다.&lt;/p&gt;
&lt;h3 id=&#34;결과&#34;&gt;결과&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;solution&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
             &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;charAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                  &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
               &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;charAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
               &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
     
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;풀이&#34;&gt;풀이&lt;/h3&gt;
&lt;p&gt;문자열 &lt;code&gt;s = &amp;quot;abcac&amp;quot;&lt;/code&gt; 를  &lt;code&gt;n = 10&lt;/code&gt; 에 반복해서 채워 넣으면 다음과 같다.
&lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/11/hackerrank1.png&#34; alt=&#34;img1&#34;&gt;
n 만큼의 인덱스에 문자열을 반복해서 넣으면 주어진 문자열 s가 2세트로 채워진다.
하지만 만약 문자열 &lt;code&gt;s = &amp;quot;aba&amp;quot;&lt;/code&gt; 를 &lt;code&gt;n=10&lt;/code&gt; 에 채워 넣는다면..?
&lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/11/hackerrank2.png&#34; alt=&#34;img2&#34;&gt;&lt;/p&gt;
&lt;p&gt;총 3세트가 만들어지고 마지막 인덱스가 애매하게 남아버린다. 마지막 인덱스까지 빈 인덱스가 없도록 확인해야한다.&lt;/p&gt;
&lt;p&gt;따라서, 총 생겨날 세트의 개수와 남게될 인덱스의 개수를 구했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 총 세트
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 남게 될 인덱스 개수
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;그리고 문자열 길이만큼 순환하면서 문자  &lt;code&gt;a&lt;/code&gt; 를 찾고 찾을 때마다 &lt;code&gt;count++&lt;/code&gt; 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;charAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;그리고 &lt;code&gt;count&lt;/code&gt; 를 이전에 구해 둔 총 생겨날 세트의 개수만큼 곱해준다. 각 세트마다 문자열 &lt;code&gt;s&lt;/code&gt; 와 동일한 &lt;code&gt;a&lt;/code&gt; 의 개수가 있기 때문이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;마지막으로 세트가 생기고 남게 될 인덱스의 개수가 &lt;code&gt;0&lt;/code&gt;이 아니라면 (세트가 인덱스에 딱 맞게 떨어지지 않는다면) 남게되는 인덱스 만큼 순환하며 문자 &lt;code&gt;a&lt;/code&gt; 가 있는지 확인하고 있으면 &lt;code&gt;count&lt;/code&gt; 를 추가해준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;charAt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;test-case&#34;&gt;Test case&lt;/h3&gt;
&lt;p&gt;여러차례의 시도 중 테스트 케이스에서 런타임 에러가 발생하면서 통과하지 못한 케이스가 있었는데 그 때 테스트 케이스는 다음과 같았다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;kmretasscityylpdhuwjirnqimlkcgxubxmsxpypgzxtenweirknjtasxtvxemtwxuarabssvqdnktqadhyktagjxoanknhgilnm&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;736778906400L&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;out put&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;51574523448
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;처음에는 단순하게 문자열을 n 만큼 순환하며 a 를 찾으려고 했는데 문자열이 n 과 동일하지 않다보니 out of index 에러를 방지하려고 이렇게 저렇게 시도 해봤지만 결국 위와 같은 방법으로 해결할 수 있었다. 알고리즘은 반복되는 규칙을 찾는 것이 중요하다는 사실을 다시 깨달았다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;출처:&lt;/strong&gt;
&lt;a href=&#34;https://www.hackerrank.com/challenges/repeated-string/problem?h_l=interview&amp;amp;playlist_slugs%5B%5D=interview-preparation-kit&amp;amp;playlist_slugs%5B%5D=warmup&#34;&gt;Repeated String | HackerRank&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/algorithm/">Algorithm</category>
                                
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/hackerrank/">Hackerrank</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>[Hyperledger]Ordering Service(오더링 서비스)</title>
                <link>https://jinnyjinnyjinjin.github.io/posts/2020/11/08-hyperledger-ordering-service/</link>
                <guid isPermaLink="true">https://jinnyjinnyjinjin.github.io/posts/2020/11/08-hyperledger-ordering-service/</guid>
                <pubDate>Sun, 08 Nov 2020 15:31:24 &#43;0900</pubDate>
                
                
                
                    <description>&lt;h1 id=&#34;오더링-서비스란&#34;&gt;&lt;strong&gt;오더링 서비스란?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;이더리움이나 비트코인과 같은 블록체인에서는 허가되지 않은 노드 참가자들도 합의 프로세스에 참여하여 블록을 생성할 수 있다. 그렇기 때문에 이러한 시스템들은 PoW 나 PoS 등과 같은 합의 알고리즘에 기반 해, 분산된 장부를 동기화 시켜 모두가 동일한 데이터를 공유함으로써 무결성을 보장하도록 한다. 하지만 여전히 장부(Ledger) 가 Fork되는 취약점을 가지고 있다.&lt;/p&gt;
&lt;p&gt;그에 반해 하이퍼레저 패브릭에서는 &lt;code&gt;Orderer&lt;/code&gt; 라고 불리는 노드가 전달받은 트랜잭션들을 처리한다. 패브릭은 결정론적인 합의 알고리즘에 의존하기 때문에 피어가 오더링 서비스로 부터 생성된 것으로 확인한 모든 블록은 최종적이고 정확해야 한다. 그렇기에 패브릭 장부들은 다른 블록체인 네트워크에서 처럼 Fork 될 수 없다.&lt;/p&gt;
&lt;p&gt;무결성을 높이는 것 외에도, 체인 코드 실행 검증(피어에서 발생)을  오더링으로부터 분리하면 성능과 확장 면에서 패브릭 이점을 제공하여 동일한 노드에서 체인코드를 실행하고 검증 및 오더링을 수행 할 때 발생할 수 있는 병목 현상을 제거한다.&lt;/p&gt;
&lt;h1 id=&#34;역할&#34;&gt;역할&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;검증된 트랜잭션들을 차례로 정리하고 패키징하여 블록에 추가&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;피어들이 트랜잭션을 검증 및 커밋할 수 있도록 블록 전파&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;consensus&#34;&gt;Consensus&lt;/h1&gt;
&lt;p&gt;트랜잭션을 충돌 없이 순서대로 처리하도록 하고, 분산 장부의 데이터가 모두 같도록 하는 consensus 종류를 선택하여 설정할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;1-solo&#34;&gt;1. Solo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이름처럼 오직 싱글 오더링 노드만 가능&lt;/li&gt;
&lt;li&gt;consensus 과정 없음&lt;/li&gt;
&lt;li&gt;장애 취약&lt;/li&gt;
&lt;li&gt;서비스 개발에 적합하지 않음. 테스트용으로 활용&lt;/li&gt;
&lt;li&gt;
&lt;p style=&#34;color:deeppink;&#34;&gt;Fabric v2.0 부터 Deprecated 됨&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-raft&#34;&gt;2. Raft&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Raft 프로토콜 기반의 CFT(Crash Fault Tolerance)&lt;/li&gt;
&lt;li&gt;Leader and Follower 모델&lt;/li&gt;
&lt;li&gt;각 채널에서 팔로워 노드들에 의해 리더 노드가 선출됨&lt;/li&gt;
&lt;li&gt;Kafka 보다 설정 및 관리가 쉬움&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-kafka&#34;&gt;3. Kafka&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Raft 와 유사함&lt;/li&gt;
&lt;li&gt;Leader and Follower 노드 설정을 사용 해 CFT 구현&lt;/li&gt;
&lt;li&gt;Kafka 수행을 위해 Zookeeper Ensemble 을 사용함&lt;/li&gt;
&lt;li&gt;Fabric v1.0 부터 사용 가능&lt;/li&gt;
&lt;li&gt;Kafka cluster 관리가 어려움&lt;/li&gt;
&lt;li&gt;
&lt;p style=&#34;color:deeppink;&#34;&gt;Fabric v2.0 부터 Deprecated 됨&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 Kafka 또는 Raft 기반의 Orderer 가 트랜잭션을 패키징하고 블록을 생성하고 전파하는 모든 프로세스를 &lt;strong&gt;오더링 서비스&lt;/strong&gt; 라고 한다.&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/hyperledger/">Hyperledger</category>
                                
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/blockchain/">Blockchain</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>[Git] drop 된 stash 복구하기</title>
                <link>https://jinnyjinnyjinjin.github.io/posts/2020/11/08-git-recover-stashed-commit/</link>
                <guid isPermaLink="true">https://jinnyjinnyjinjin.github.io/posts/2020/11/08-git-recover-stashed-commit/</guid>
                <pubDate>Sun, 08 Nov 2020 15:26:07 &#43;0900</pubDate>
                
                
                
                    <description>&lt;p&gt;개발을 하면서 &lt;code&gt;stash&lt;/code&gt; 를 잘 활용하는데 실수로 저장해둔 &lt;code&gt;stash&lt;/code&gt; 를 삭제 했던 적이 있었다.
순간 당황스러웠지만 생각했던 것보다 간단하게 아래의 과정으로 복구시킬 수 있었다.&lt;/p&gt;
&lt;h2 id=&#34;1-stash-커밋-찾기&#34;&gt;1. Stash 커밋 찾기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git log --graph --oneline --decorate &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; git fsck --no-reflog &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;/dangling commit/ {print $3}&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;위 명령어는 모든 stash 커밋들과 더 이상 참조하지 않는 모든 브랜치를 포함하여, 현재까지 생성한 커밋과 잃어버린 커밋까지 모든 커밋 로그를 출력한다.&lt;/p&gt;
&lt;h2 id=&#34;2-commit-hash-복구&#34;&gt;2. Commit Hash 복구&lt;/h2&gt;
&lt;p&gt;출력된 로그 중에 &lt;code&gt;WIP on&lt;/code&gt; 으로 시작하는 커밋 Hash 를 찾아 아래 명령어를 실행하면 잃어버린 커밋을 되찾을 수 있었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git stash apply &amp;lt;YOUR_WIP_COMMIT_HASH&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/git/">Git</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>[Docker] Docker로 MariaDB 구동하기</title>
                <link>https://jinnyjinnyjinjin.github.io/posts/2020/11/08-docker-db-maria/</link>
                <guid isPermaLink="true">https://jinnyjinnyjinjin.github.io/posts/2020/11/08-docker-db-maria/</guid>
                <pubDate>Sun, 08 Nov 2020 14:10:23 &#43;0900</pubDate>
                
                
                
                    <description>&lt;p&gt;로컬에서 DB 를 시스템에 직접 설치하기보다 도커를 활용해 쉽고 간단하게 컨테이너를 띄워 사용할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;시스템-환경&#34;&gt;시스템 환경&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MacOS&lt;/li&gt;
&lt;li&gt;Docker 19.03.8&lt;/li&gt;
&lt;li&gt;Docker-compose 1.25.4&lt;/li&gt;
&lt;li&gt;MariaDB 10.3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-docker-run-명령어로-실행&#34;&gt;1. docker run 명령어로 실행&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt; 명령어로 도커 허브에서 이미지를 바로 다운 받아 컨테이너를 바로 실행 시킨다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker run --name &amp;lt;컨테이너 이름&amp;gt; -e &lt;span class=&#34;nv&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;db 접속 비밀번호&amp;gt; -p 3306:3306 -d mariadb:tag
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;run&lt;/code&gt; 다운 받은 도커 이미지로 컨테이너를 실행시키는 명령어.
&lt;code&gt;--name&lt;/code&gt; 실행시키는 컨테이너의 이름을 지정할 수 있는 옵션.
&lt;code&gt;-p&lt;/code&gt; 포트를 지정. 호스트에서 &lt;code&gt;3306&lt;/code&gt; 으로 접속 시, 컨테이너 &lt;code&gt;3306&lt;/code&gt; 으로 포워딩.
&lt;code&gt;-d&lt;/code&gt; 컨테이너를 백그라운드로 실행.
&lt;code&gt;tag&lt;/code&gt; 실행하고자 하는 MariaDB 의 버전을 지정. &lt;code&gt;ex) mariadb:10.3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;실행 후, 아래 명령어로 컨테이너가 실행되었는지 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;정상적으로 실행된 컨테이너&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
dfce24bf4cac        mariadb:10.3        &lt;span class=&#34;s2&#34;&gt;&amp;#34;docker-entrypoint.s…&amp;#34;&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;48&lt;/span&gt; seconds ago      Up &lt;span class=&#34;m&#34;&gt;47&lt;/span&gt; seconds       0.0.0.0:3306-&amp;gt;3306/tcp   mariadb_test
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;2-yaml-파일로-실행&#34;&gt;2. yaml 파일로 실행&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;yaml&lt;/code&gt; 파일을 생성해서 실행시킬 어플리케이션에 대해 더욱 상세한 설정이 가능하다. 파일 실행을 위해서는 &lt;code&gt;docker-compose&lt;/code&gt;가 설치되어 있어야 한다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;code&gt;yaml&lt;/code&gt; 파일 생성&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;yaml 파일명은 원하는 이름으로 생성할 수 있는데&lt;code&gt;docker-compose&lt;/code&gt;명령어로 실행할 때 옵션값 &lt;code&gt;-f&lt;/code&gt; 를 주어야 한다. 반면에, &lt;code&gt;docker-compose up&lt;/code&gt; 명령어를 옵션 값 없이 실행하면 자동으로 &lt;code&gt;docker-compose.yaml&lt;/code&gt; 을 찾아 실행시킨다. 또한, &lt;code&gt;.yaml&lt;/code&gt; 또는 &lt;code&gt;yml&lt;/code&gt; 모두 사용 가능하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ vi docker-compose.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;다음과 같이 &lt;code&gt;mariadb&lt;/code&gt; 컨테이너 실행에 필요한 설정을 &lt;code&gt;yaml&lt;/code&gt; 파일 형식에 따라 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;version: &lt;span class=&#34;s1&#34;&gt;&amp;#39;3.1&amp;#39;&lt;/span&gt;

services:
  mariadb:
    image: mariadb:10.3
    container_name: mariadb-test
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: my_db 
      MYSQL_USER: jinnyjinnyjinjin
      MYSQL_PASSWORD: password
    ports:
      - 3306:3306
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;yaml&lt;/code&gt; 파일에서는 &lt;code&gt;services&lt;/code&gt; 와 &lt;code&gt;networks&lt;/code&gt; 그리고 &lt;code&gt;volumes&lt;/code&gt; 설정 파트가 있다.&lt;br&gt;
&lt;code&gt;version&lt;/code&gt;  compose 파일 포맷 버전.
&lt;code&gt;services&lt;/code&gt; 실행하고자 하는 컨테이너의 설정 값을 셋팅하는 영역. &lt;code&gt;command-line&lt;/code&gt; 으로 실행할 때, &lt;code&gt;docker run&lt;/code&gt; 하위로 들어가는 파라미터 값을 설정하는 것과 동일.
&lt;code&gt;mariadb&lt;/code&gt; 실행하고자 하는 서비스명. (직접 지정 가능)
&lt;code&gt;container_name&lt;/code&gt; 컨테이너명 지정.
&lt;code&gt;image&lt;/code&gt; 실행하려는 컨테이너의 이미지명과 버전(tag).
&lt;code&gt;environment&lt;/code&gt; 어플리케이션 환경설정. 데이터베이스에 접속하기 위한 비밀번호 및 유저명 등을 설정한다.
&lt;code&gt;port&lt;/code&gt; 포트를 지정. 호스트에서 &lt;code&gt;3306&lt;/code&gt; 으로 접속 시, 컨테이너 &lt;code&gt;3306&lt;/code&gt; 으로 포워딩.&lt;/p&gt;
&lt;p&gt;파일을 생성하고 &lt;code&gt;compose&lt;/code&gt; 명령어로 실행한다. &lt;code&gt;-d&lt;/code&gt; 옵션을 주어 백그라운드로 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;실행 후 아래 명령어를 입력하면 실행 중인 컨테이너를 확인할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;CONTAINER ID        IMAGE                                                 COMMAND                  CREATED             STATUS                      PORTS                    NAMES
dfce24bf4cac        mariadb:10.3                                          &lt;span class=&#34;s2&#34;&gt;&amp;#34;docker-entrypoint.s…&amp;#34;&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt; minutes ago      Up &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt; minutes               0.0.0.0:3307-&amp;gt;3307/tcp   mariadb_test
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/docker/">Docker</category>
                                
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/db/">DB</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>[Docker] Login Error</title>
                <link>https://jinnyjinnyjinjin.github.io/posts/2020/11/08-docker-login/</link>
                <guid isPermaLink="true">https://jinnyjinnyjinjin.github.io/posts/2020/11/08-docker-login/</guid>
                <pubDate>Sun, 08 Nov 2020 13:52:02 &#43;0900</pubDate>
                
                
                
                    <description>&lt;h2 id=&#34;실습환경&#34;&gt;실습환경&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 16&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우분투 터미널에서 &lt;code&gt;docker login&lt;/code&gt; 명령어로 도커 로그인을 시도했을 때, 아래와 같은 에러가 발생 한다면 이렇게 해결할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;에러내용&#34;&gt;에러내용&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Remote error from secret service: org.freedesktop.Secret.Error.IsLocked: Cannot create an item in a locked collection
Error saving credentials: error storing credentials - err: &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; status 1, out Cannot create an item in a locked collection.
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;해결방법&#34;&gt;해결방법&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;gnupg2&lt;/code&gt; 를 설치한다. &lt;code&gt;gnupg2&lt;/code&gt; 는 안전한 통신과 데이터 저장을 위한 디지털 시그니쳐와 증명서 암호화 툴이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get update
$ sudo apt install gnupg2 pass
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;설치 후,  docker login 재시도&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker login
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;결과&#34;&gt;결과&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Password:
WARNING! Your password will be stored unencrypted in /home/User_id/.docker/config.json.
Configure a credential helper to remove this warning. See
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;https://docs.docker.com/engine/reference/commandline/login/#credentials-store&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;https://docs.docker.com/engine/reference/commandline/login/#credentials-store&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

Login Succeeded
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;로컬 &lt;code&gt;/home/User_id/.docker/config.json&lt;/code&gt; path 에 내 패스워드가 암호화되지 않고 저장된다는 경고가 뜨고 로그인은 성공한다. 만약 내 암호가 이렇게 저장 되는 것이 내키지 않는다면, 경고문과 함께 안내되는 주소로 접속 해 가이드를 따르면 된다.&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/docker/">Docker</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>[자료구조] Heap(힙)</title>
                <link>https://jinnyjinnyjinjin.github.io/posts/2020/11/07-ds-heap/</link>
                <guid isPermaLink="true">https://jinnyjinnyjinjin.github.io/posts/2020/11/07-ds-heap/</guid>
                <pubDate>Sat, 07 Nov 2020 17:47:51 &#43;0900</pubDate>
                
                
                
                    <description>&lt;h3 id=&#34;이진-트리의-한-종류-이진-힙---binary-heap&#34;&gt;이진 트리의 한 종류 (이진 힙 - binary heap)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;루트(root) 노드가 언제나 최댓값 또는 최솟값을 가짐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최대 힙(max heap), 최소 힙(min heap)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;완전 이진 트리여야 함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최대 힙(max) 힙
&lt;ul&gt;
&lt;li&gt;부모 노드가 자식 노드보다 큰 값을 가지고 있음&lt;/li&gt;
&lt;li&gt;재귀적으로도 정의됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;이진-탐색트리와의-비교&#34;&gt;이진 탐색트리와의 비교&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;원소들은 완전히 크기 순으로 정렬되어 있는가?
&lt;ul&gt;
&lt;li&gt;이진 탐색 트리에서는 그렇지만 최대 힙, 최소 힙에서는 그렇지 않고 느슨하게 정렬되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특정 키 값을 가지는 원소를 빠르게 검색할 수 있는가?
&lt;ul&gt;
&lt;li&gt;이진 탐색 트리에서는 일반적으로 키 값으로 왼쪽 오른쪽을 찾아가기 때문에 빠르게 검색할 수 있지만 힙에서는 특정 키 값이 힙 안에 들어 있는가를 검색하는데에 좋은 방법이 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;부가의 제약 조건은 어떤 것인가?
&lt;ul&gt;
&lt;li&gt;힙은 이진 탐색 트리에서 완전 이진트리여야 한다는 부가적인 제약 조건을 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;최대-힙max-heap의-추상적-자료구조&#34;&gt;최대 힙(Max Heap)의 추상적 자료구조&lt;/h3&gt;
&lt;h4 id=&#34;연산의-정의&#34;&gt;연산의 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;insert(item)&lt;/code&gt; - 새로운 원소를 삽입&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove()&lt;/code&gt; - 최대 원소(root node)를 반환함과 동시에 이 노드를 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;color: rgb(255, 51, 153);&#34;&gt;순환이나 검색은 힙에서 얻을 수 있는 좋은 연산이 아님&lt;/p&gt;
&lt;h3 id=&#34;데이터-표현의-설계&#34;&gt;데이터 표현의 설계&lt;/h3&gt;
&lt;h4 id=&#34;배열을-이용한-이진-트리의-표현&#34;&gt;배열을 이용한 이진 트리의 표현&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/11/max_heap.jpeg&#34; alt=&#34;max_heap&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;노드-번호-n을-기준으로&#34;&gt;노드 번호 n을 기준으로&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;왼쪽 자식의 번호 = &lt;code&gt;2 * n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;오른쪽 자식의 번호: &lt;code&gt;2 * n + 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;부모 노드의 번호: &lt;code&gt;n // 2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;따라서 배열을 이용해 이진 트리를 구현할 수 있다.
&lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/11/max_heap_array.png&#34; alt=&#34;max_heap_array&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;최대-힙에-원소-삽입&#34;&gt;최대 힙에 원소 삽입&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;트리의 마지막 자리에 새로운 원소를 임시로 저장
&lt;ul&gt;
&lt;li&gt;완전 이진 트리의 성질을 만족&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;부모 노드와 키 값을 비교하여 위로, 위로, 이동&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;복잡도&#34;&gt;복잡도&lt;/h4&gt;
&lt;h5 id=&#34;원소의-개수가-n인-최대-힙에-새로운-원소-삽입&#34;&gt;원소의 개수가 n인 최대 힙에 새로운 원소 삽입&lt;/h5&gt;
&lt;p&gt;➡️ 부모 노드와의 대소 비교 최대 회수 최악 복잡도:&lt;br&gt;
&lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/11/complexity.jpeg&#34; alt=&#34;complexity&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;최대-힙에서-원소의-삭제&#34;&gt;최대 힙에서 원소의 삭제&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;루트 노드의 제거 - 이것이 원소들 중 최댓값&lt;/li&gt;
&lt;li&gt;(루트 노드를 제거 했을 때에도 완전 이진 트리를 만족하기 위해서) 트리 마지막 자리 노드를 임시로 루트 노드의 자리에 배치&lt;/li&gt;
&lt;li&gt;(아직 최대값이 아닐 수도 있기 때문에) 자식 노드들과의 값 비교 후 아래로, 아래로 이동
&lt;ul&gt;
&lt;li&gt;자식은 둘 있을 수도 있는데, 어느 쪽으로 이동?
➡️ 둘 중에 더 큰 값을 기준으로 임시로 배치된 노드가 아래로 이동하게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;복잡도-1&#34;&gt;복잡도&lt;/h4&gt;
&lt;h5 id=&#34;원소의-개수가-n인-최대-힙에서-원소-삭제&#34;&gt;원소의 개수가 n인 최대 힙에서 원소 삭제&lt;/h5&gt;
&lt;p&gt;➡️ 자식 노드들과의 대소 비교 최대 회수 최악 복잡도:&lt;br&gt;
&lt;img src=&#34;https://jinnyjinnyjinjin.github.io/images/2020/11/complexity.jpeg&#34; alt=&#34;complexity&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;최대최소-힙의-응용&#34;&gt;최대/최소 힙의 응용&lt;/h3&gt;
&lt;h4 id=&#34;우선-순위-큐-priority-queue&#34;&gt;우선 순위 큐 (priority queue)&lt;/h4&gt;
&lt;p&gt;➡️ Enqueue 할 때, &lt;code&gt;느슨한 정렬&lt;/code&gt; 을 이루고 있도록 함: &lt;strong&gt;O(logN)&lt;/strong&gt;&lt;br&gt;
➡️ Dequeue 할 때, 최댓값을 순서대로 추출: &lt;strong&gt;O(logN)&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;힙-정렬heap-sort&#34;&gt;힙 정렬(heap sort)&lt;/h4&gt;
&lt;p&gt;➡️ 정렬되지 않은 원소들을 아무 순서로나 최대 힙에 삽입: &lt;strong&gt;O(logN)&lt;/strong&gt;&lt;br&gt;
➡️ 삽입이 끝나면, 힙이 비게 될 때까지 하나씩 삭제: &lt;strong&gt;O(logN)&lt;/strong&gt;&lt;br&gt;
➡️ 원소들이 삭제된 순서가 원소들의 정렬 순서&lt;br&gt;
➡️ 정렬 알고리즘의 복잡도: &lt;strong&gt;O(NlogN)&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;참조: &lt;a href=&#34;https://programmers.co.kr/learn/courses/57&#34;&gt;어서와! 자료구조와 알고리즘은 처음이지?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://jinnyjinnyjinjin.github.io/tags/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/">자료구조</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
